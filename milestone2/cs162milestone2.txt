CS162 Project Milestone 2
Project Implementation Plan

Topic:
Worlds

Description:
"This is a recent clever idea about allowing a programmer to explicitly sprout off "alternate worlds" 
where they can perform actions that have no affect on the main world, and optionally then integrate 
those changes back into the main world."

Group Members:
John Meeker
Ken Hwang 

======================
Implementation Plan
======================

What have you learned about the topic you selected?

    The general idea behind Worlds is to ditch the style of the usual imperative style programs with
    a global mutable state in favor of a format where the program can fork off into other "worlds"
    to perform experiments and other error-prone tasks. As the paper "Worlds: Controlling the Scope
    of Side Effects" describes it, Worlds are first class values that can be assigned to a variable
    or passed as an argument to a function. The side effects experiences in a child world may be
    committed back into the parent worlds that created it if desired.

    There are also a couple safety properties that must be satisfied:

        "No suprises" says that changes to variables in the parent world should only propograte to
        sprouted worlds that have not read or modified that variable, and thus cannot have been
        effected by it's value.

        "Consistency" says that commits from a child world should never leave the parent in an
        inconsistent state, and that each sprouted world must pass a serializability check when
        committing back to the parent.

What is your vision for the final version of your project, based on what you have learned?



You could include some made-up programs in that final language as an example of what you intend.

How will you get to that final vision?

As I stated above, you should describe an incremental series of milestones so that you're guaranteed 
to always have something to turn in even if your vision turns out to be too ambitious.

====================
Collaboration Plan
====================

James Ebentier will do all the work.
